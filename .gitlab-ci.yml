image: maven:3.8.3-openjdk-17

variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  DOCKER_IMAGE: "$CI_REGISTRY_IMAGE/chimera:latest" 
  JAR_DIR : "build/application-files/"
  FILTER_VERSION : "1.0-SNAPSHOT"
stages:
  - build
  - test
  - scan
  - deploy


cache:
  paths:
    - .m2/repository/
    - .m2/settings.xml
    - target/
before_script :
   - |
      function generateDocker(){
              
      # Output Dockerfile
      DOCKERFILE="Dockerfile"

      # Ensure the JAR directory exists
      if [[ ! -d "$JAR_DIR" ]]; then
        echo "Error: Directory $JAR_DIR does not exist."
        exit 1
      fi

      # Start writing the Dockerfile
      cat <<EOL > "$DOCKERFILE"
      # Use an official Java runtime as a parent image
      FROM openjdk:17-jdk-slim

      # Set working directory
      WORKDIR /app

      # Copy JAR files into the container
      EOL

      # Iterate over all .jar files in the folder and add COPY instructions
      for jar in "$JAR_DIR"/*.jar; do
        if [[ -f "$jar" ]]; then
          jar_name=$(basename "$jar")
          echo "COPY ${JAR_DIR}/$jar_name /app/$jar_name" >> "$DOCKERFILE"
        fi
      done

      # Add an example CMD command
      cat <<EOL >> "$DOCKERFILE"

      # Expose application port
      EXPOSE 8080

      # Command to run the first JAR (customize as needed)
      CMD ["java", "-jar", "/app/$(basename "${JAR_DIR}"/*.jar)"]
      EOL

      # Output result
      echo "Dockerfile generated successfully:"
      cat "$DOCKERFILE"

      }
#ChimeraRunner,PersonalRunner,Framework,PantherLabs
build:
  stage: build

 
  script:
    - |
      echo "Maven Path : $(whereis mvn)"
      echo "Java Path : $(whereis java)"
      mvn clean package -DskipTests
  artifacts:
    paths:
      - ${JAR_DIR}/*.jar
      - Dockerfile
    expire_in: 1 week

