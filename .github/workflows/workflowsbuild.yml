name: Chimera Docker Build & Publish

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Build all modules with Maven
        run: mvn clean package -DskipTests

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images for each JAR
        run: |
          for jar in $(find . -name "*.jar" -not -path "*/target/original-*.jar"); do
            module_dir=$(dirname "$jar")
            module_name=$(basename $(dirname "$jar"))
            image_name="ghcr.io/${{ github.repository_owner }}/${module_name}:latest"
            echo "Processing $jar in module $module_name"

            # Use a Dockerfile in each module, or copy a template if not present
            if [ ! -f "$module_dir/Dockerfile" ]; then
              echo "No Dockerfile found in $module_dir, creating a simple Dockerfile"
              echo "FROM eclipse-temurin:17-jre" > $module_dir/Dockerfile
              echo "COPY $(basename $jar) /app.jar" >> $module_dir/Dockerfile
              echo 'ENTRYPOINT ["java", "-jar", "/app.jar"]' >> $module_dir/Dockerfile
            fi

              dest_jar="$module_dir/$(basename $jar)"
              if [ "$jar" != "$dest_jar" ]; then
                cp "$jar" "$dest_jar"
              else
                echo "File $jar is already in the destination directory, skipping copy."
              fi
            docker build -t $image_name $module_dir
            docker push $image_name
          done
