name: Chimera Docker Build & Publish

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Get Current Version
        id: extract_version
        run: |
          version=$(grep -m 1 '<version>' pom.xml | sed -E 's/.*<version>(.+)<\/version>.*/\1/')
          echo "Current Version: $version"
          echo "version=${version,,}" >> "$GITHUB_OUTPUT"
      
      - name: Build all modules with Maven
        run: mvn clean package -DskipTests

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images for each JAR
        run: |
          # Find all .jar files excluding original ones
          for jar in $(find . -name "*.jar" -not -path "*/target/original-*.jar"); do
            module_dir=$(dirname "$jar")
            module_dir="${module_dir%/target}"
            #module_name=$(basename "$(dirname "$jar")")
            module_name=$(basename "$module_dir")
            
            # Extract the version from the module's pom.xml
            version=$(grep -oP '(?<=<version>)[^<]+' "$module_dir/pom.xml" | head -n 1)
            
            # Ensure module_name is lowercase and replace spaces with underscores
            formatted_module_name=$(echo "$module_name" | tr '[:space:]' '_')
            
            # Construct the image name with version and convert everything to lowercase
            image_name="ghcr.io/${{ github.repository_owner }}/${formatted_module_name}_${version}:latest"
            image_name_lowercase=$(echo "$image_name" | tr '[:upper:]' '[:lower:]')

            echo "Processing $jar in module $module_name, version $version"

            # Use a Dockerfile in each module, or copy a template if not present
            if [ ! -f "$module_dir/Dockerfile" ]; then
              echo "No Dockerfile found in $module_dir, creating a simple Dockerfile"
              echo "FROM eclipse-temurin:17-jre" > $module_dir/Dockerfile
              echo "COPY $(basename $jar) /app.jar" >> $module_dir/Dockerfile
              echo 'ENTRYPOINT ["java", "-jar", "/app.jar"]' >> $module_dir/Dockerfile
            fi

            # Ensure the JAR file is copied to the module directory (if not already)
            dest_jar="$module_dir/$(basename $jar)"
            if [ "$jar" != "$dest_jar" ]; then
              cp "$jar" "$dest_jar"
            else
              echo "File $jar is already in the destination directory, skipping copy."
            fi

            # Build and push the Docker image
            docker build -t $image_name_lowercase $module_dir
            docker push $image_name_lowercase
          done
